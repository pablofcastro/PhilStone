/* The following code was generated by JFlex 1.4.1 on 30/10/18 14:00 */

package Parser;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 30/10/18 14:00 from the specification file
 * <tt>/Users/Pablo/University/my-papers/drafts/Alloy.Synt/Tool/git/PhilStone/src/Parser/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 53,  0,  0,  0,  0, 51,  0, 40, 41,  8, 56, 31, 49, 57,  7, 
     4,  5,  5,  5,  5,  5,  5,  5,  5,  5, 32, 55, 48, 54, 50,  0, 
     0, 33, 46, 46, 46, 34, 35, 36, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, 46, 47, 38, 46, 39, 37, 46, 46, 42,  0, 43,  0, 30, 
     0, 20, 24, 13, 45, 14, 26, 22, 45, 17, 45, 25, 23, 21, 18, 12, 
    10, 45, 11, 15, 16, 29, 19, 27, 45, 28, 45, 44, 52,  6,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\1\6\14\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\1\1\26"+
    "\2\1\1\27\1\30\1\31\1\32\1\33\2\0\7\7"+
    "\1\34\5\7\3\0\1\35\1\36\1\37\3\0\1\7"+
    "\1\40\2\7\1\41\1\42\1\7\1\43\10\7\2\0"+
    "\1\44\3\0\1\45\3\7\1\46\1\47\1\50\2\7"+
    "\1\51\1\7\1\52\2\7\1\0\1\53\2\7\1\0"+
    "\4\7\1\54\1\55\2\7\2\0\1\7\1\56\1\57"+
    "\2\7\1\60\2\0\1\7\1\61\1\62\1\63\1\0"+
    "\1\7\1\0\1\64\2\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\72\0\256\0\72\0\350"+
    "\0\72\0\u0122\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\72\0\72\0\72"+
    "\0\72\0\u03da\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\u0414\0\u044e\0\72\0\u0488\0\u04c2"+
    "\0\u04fc\0\72\0\72\0\72\0\72\0\u0536\0\u0570\0\u05aa"+
    "\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u01d0\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\72"+
    "\0\72\0\72\0\u0910\0\u094a\0\u0984\0\u09be\0\u01d0\0\u09f8"+
    "\0\u0a32\0\u01d0\0\u01d0\0\u0a6c\0\u01d0\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\72"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\72\0\u0d98\0\u0dd2\0\u0e0c\0\u01d0"+
    "\0\u01d0\0\u01d0\0\u0e46\0\u0e80\0\u01d0\0\u0eba\0\u01d0\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\72\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u01d0\0\72\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u01d0\0\u01d0\0\u125a\0\u1294\0\u01d0\0\u12ce\0\u1308"+
    "\0\u1342\0\u01d0\0\u01d0\0\72\0\u137c\0\u13b6\0\u13f0\0\u01d0"+
    "\0\u142a\0\u1464\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\2\15\1\16\1\15\1\17"+
    "\2\15\1\20\1\21\1\22\1\23\1\24\1\15\1\25"+
    "\3\15\1\2\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\15\1\2\1\44\1\45\1\46\1\2\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\74\0\1\4\73\0"+
    "\2\6\73\0\1\56\1\57\65\0\2\15\4\0\1\15"+
    "\1\60\1\61\21\15\3\0\7\15\5\0\3\15\16\0"+
    "\2\15\4\0\23\15\1\62\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\21\15\1\63\2\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\24\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\1\64\23\15\3\0"+
    "\7\15\5\0\3\15\16\0\2\15\4\0\10\15\1\65"+
    "\13\15\3\0\7\15\5\0\3\15\16\0\2\15\4\0"+
    "\3\15\1\66\5\15\1\67\12\15\3\0\7\15\5\0"+
    "\3\15\16\0\2\15\4\0\12\15\1\70\11\15\3\0"+
    "\7\15\5\0\3\15\16\0\2\15\4\0\15\15\1\71"+
    "\6\15\3\0\7\15\5\0\3\15\16\0\2\15\4\0"+
    "\2\15\1\72\21\15\3\0\7\15\5\0\3\15\16\0"+
    "\2\15\4\0\2\15\1\73\21\15\3\0\7\15\5\0"+
    "\3\15\16\0\2\15\4\0\1\15\1\74\22\15\3\0"+
    "\7\15\5\0\3\15\36\0\1\75\60\0\1\76\137\0"+
    "\1\77\73\0\1\100\72\0\1\101\73\0\1\102\14\0"+
    "\1\103\60\0\10\104\1\105\61\104\4\0\2\15\4\0"+
    "\2\15\1\106\1\15\1\107\2\15\1\110\14\15\3\0"+
    "\7\15\5\0\3\15\16\0\2\15\4\0\5\15\1\111"+
    "\16\15\3\0\7\15\5\0\3\15\16\0\2\15\4\0"+
    "\10\15\1\112\13\15\3\0\7\15\5\0\3\15\16\0"+
    "\2\15\4\0\10\15\1\113\13\15\3\0\7\15\5\0"+
    "\3\15\16\0\2\15\4\0\4\15\1\114\17\15\3\0"+
    "\7\15\5\0\3\15\16\0\2\15\4\0\6\15\1\115"+
    "\1\116\1\15\1\117\12\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\6\15\1\120\15\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\7\15\1\121\14\15"+
    "\3\0\7\15\5\0\3\15\16\0\2\15\4\0\2\15"+
    "\1\122\21\15\3\0\7\15\5\0\3\15\16\0\2\15"+
    "\4\0\3\15\1\123\20\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\2\15\1\124\21\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\12\15\1\125\11\15"+
    "\3\0\7\15\5\0\3\15\41\0\1\126\77\0\1\127"+
    "\116\0\1\130\7\0\1\103\1\131\1\132\67\103\10\104"+
    "\1\133\61\104\7\0\1\134\1\105\65\0\2\15\4\0"+
    "\1\135\2\15\1\136\20\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\13\15\1\137\10\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\6\15\1\140\15\15"+
    "\3\0\7\15\5\0\3\15\16\0\2\15\4\0\3\15"+
    "\1\141\20\15\3\0\7\15\5\0\3\15\16\0\2\15"+
    "\4\0\6\15\1\142\15\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\12\15\1\143\11\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\7\15\1\144\14\15"+
    "\3\0\7\15\5\0\3\15\16\0\2\15\4\0\10\15"+
    "\1\145\13\15\3\0\7\15\5\0\3\15\16\0\2\15"+
    "\4\0\16\15\1\146\5\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\17\15\1\147\4\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\15\15\1\150\6\15"+
    "\3\0\7\15\5\0\3\15\16\0\2\15\4\0\13\15"+
    "\1\151\10\15\3\0\7\15\5\0\3\15\31\0\1\152"+
    "\70\0\1\153\55\0\1\132\3\0\1\134\71\0\1\134"+
    "\63\0\7\104\1\134\1\133\61\104\4\0\2\15\4\0"+
    "\4\15\1\154\17\15\3\0\7\15\5\0\3\15\16\0"+
    "\2\15\4\0\4\15\1\155\17\15\3\0\7\15\5\0"+
    "\3\15\16\0\2\15\4\0\24\15\1\156\2\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\1\15\1\157\22\15"+
    "\3\0\7\15\5\0\3\15\16\0\2\15\4\0\2\15"+
    "\1\160\21\15\3\0\7\15\5\0\3\15\16\0\2\15"+
    "\4\0\12\15\1\161\11\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\4\15\1\162\17\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\4\15\1\163\17\15"+
    "\3\0\7\15\5\0\3\15\30\0\1\164\57\0\2\15"+
    "\4\0\1\15\1\165\22\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\5\15\1\166\16\15\3\0\7\15"+
    "\5\0\3\15\33\0\1\167\6\0\1\170\45\0\2\15"+
    "\4\0\7\15\1\171\14\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\10\15\1\172\13\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\15\15\1\173\6\15"+
    "\3\0\7\15\5\0\3\15\16\0\2\15\4\0\12\15"+
    "\1\174\11\15\3\0\7\15\5\0\3\15\16\0\2\15"+
    "\4\0\6\15\1\175\15\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\5\15\1\176\16\15\3\0\7\15"+
    "\5\0\3\15\34\0\1\177\63\0\1\200\61\0\2\15"+
    "\4\0\12\15\1\201\11\15\3\0\7\15\5\0\3\15"+
    "\16\0\2\15\4\0\10\15\1\202\13\15\3\0\7\15"+
    "\5\0\3\15\16\0\2\15\4\0\22\15\1\203\1\15"+
    "\3\0\7\15\5\0\3\15\32\0\1\204\65\0\1\205"+
    "\61\0\2\15\4\0\10\15\1\206\13\15\3\0\7\15"+
    "\5\0\3\15\41\0\1\207\46\0\2\15\4\0\6\15"+
    "\1\210\15\15\3\0\7\15\5\0\3\15\30\0\1\211"+
    "\77\0\1\212\67\0\1\213\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5278];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\14\1\4\11\1\1\11\11\2\1\1\11\3\1\4\11"+
    "\2\0\15\1\3\0\3\11\3\0\20\1\2\0\1\11"+
    "\3\0\1\11\15\1\1\0\1\11\2\1\1\0\5\1"+
    "\1\11\2\1\2\0\6\1\2\0\3\1\1\11\1\0"+
    "\1\1\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	//int lvl = 0;
	//int olvl = 0;
	
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { /* ignore */
          }
        case 54: break;
        case 22: 
          { return symbol(sym.MINUS, new String(yytext()) );
          }
        case 55: break;
        case 29: 
          { return symbol(sym.AND, new String(yytext()));
          }
        case 56: break;
        case 50: 
          { return symbol(sym.PROPERTY, new String(yytext()) );
          }
        case 57: break;
        case 30: 
          { return symbol(sym.OR, new String(yytext()));
          }
        case 58: break;
        case 6: 
          { return symbol(sym.ASTERISK, new String(yytext()) );
          }
        case 59: break;
        case 11: 
          { return symbol(sym.EXIST, new String(yytext()));
          }
        case 60: break;
        case 7: 
          { return symbol(sym.ID, new String(yytext()));
          }
        case 61: break;
        case 41: 
          { return symbol(sym.MAIN, new String(yytext()) );
          }
        case 62: break;
        case 33: 
          { return symbol(sym.RUN, new String(yytext()) );
          }
        case 63: break;
        case 43: 
          { return symbol(sym.TRUE, new String(yytext()) );
          }
        case 64: break;
        case 20: 
          { return symbol(sym.RBRACKET, new String(yytext()));
          }
        case 65: break;
        case 39: 
          { return symbol(sym.SPEC, new String(yytext()) );
          }
        case 66: break;
        case 1: 
          { System.err.println("Illegal character @"+yyline+","+yycolumn+": "+yytext());
          }
        case 67: break;
        case 35: 
          { return symbol(sym.INT, new String(yytext()) );
          }
        case 68: break;
        case 44: 
          { return symbol(sym.FRAME, new String(yytext()) );
          }
        case 69: break;
        case 17: 
          { return symbol(sym.LPARENT, new String(yytext()));
          }
        case 70: break;
        case 46: 
          { return symbol(sym.ACTION, new String(yytext()) );
          }
        case 71: break;
        case 52: 
          { return symbol(sym.INVARIANT, new String(yytext()) );
          }
        case 72: break;
        case 14: 
          { return symbol(sym.NEXT, new String(yytext()));
          }
        case 73: break;
        case 25: 
          { return symbol(sym.SEMICOLON, new String(yytext()) );
          }
        case 74: break;
        case 31: 
          { return symbol(sym.NEQ, new String(yytext()));
          }
        case 75: break;
        case 32: 
          { return symbol(sym.PRE, new String(yytext()) );
          }
        case 76: break;
        case 45: 
          { return symbol(sym.FALSE, new String(yytext()) );
          }
        case 77: break;
        case 24: 
          { return symbol(sym.EQ, new String(yytext()));
          }
        case 78: break;
        case 48: 
          { return symbol(sym.PROCESS, new String(yytext()) );
          }
        case 79: break;
        case 42: 
          { return symbol(sym.LOCK, new String(yytext()) );
          }
        case 80: break;
        case 8: 
          { return symbol(sym.COMMA, new String(yytext()) );
          }
        case 81: break;
        case 3: 
          { return symbol(sym.INTEGER, new Integer(Integer.parseInt(yytext())));
          }
        case 82: break;
        case 19: 
          { return symbol(sym.LBRACKET, new String(yytext()));
          }
        case 83: break;
        case 13: 
          { return symbol(sym.GLOBALLY, new String(yytext()));
          }
        case 84: break;
        case 12: 
          { return symbol(sym.FUTURE, new String(yytext()));
          }
        case 85: break;
        case 26: 
          { return symbol(sym.PLUS, new String(yytext()) );
          }
        case 86: break;
        case 34: 
          { return symbol(sym.OWN, new String(yytext()) );
          }
        case 87: break;
        case 53: 
          { return symbol(sym.PRIMBOOL, new String(yytext()) );
          }
        case 88: break;
        case 23: 
          { return symbol(sym.NEG, new String(yytext()) );
          }
        case 89: break;
        case 21: 
          { return symbol(sym.LBRACE, new String(yytext()));
          }
        case 90: break;
        case 15: 
          { return symbol(sym.UNTIL, new String(yytext()) );
          }
        case 91: break;
        case 28: 
          { return symbol(sym.AV, new String(yytext()) );
          }
        case 92: break;
        case 40: 
          { return symbol(sym.INIT, new String(yytext()) );
          }
        case 93: break;
        case 18: 
          { return symbol(sym.RPARENT, new String(yytext()));
          }
        case 94: break;
        case 16: 
          { return symbol(sym.WEAKUNTIL, new String(yytext()) );
          }
        case 95: break;
        case 27: 
          { return symbol(sym.DOT, new String(yytext()) );
          }
        case 96: break;
        case 38: 
          { return symbol(sym.POST, new String(yytext()) );
          }
        case 97: break;
        case 4: 
          { return symbol(sym.RBRACE, new String(yytext()));
          }
        case 98: break;
        case 51: 
          { return symbol(sym.PRIMINT, new String(yytext()) );
          }
        case 99: break;
        case 9: 
          { return symbol(sym.COLON, new String(yytext()) );
          }
        case 100: break;
        case 49: 
          { return symbol(sym.BOOL, new String(yytext()) );
          }
        case 101: break;
        case 47: 
          { return symbol(sym.GLOBAL, new String(yytext()) );
          }
        case 102: break;
        case 36: 
          { return symbol(sym.IFF, new String(yytext()));
          }
        case 103: break;
        case 10: 
          { return symbol(sym.FORALL, new String(yytext()));
          }
        case 104: break;
        case 5: 
          { return symbol(sym.SLASH, new String(yytext()) );
          }
        case 105: break;
        case 2: 
          { /* ignore white space */
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
