
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 16 09:47:37 ART 2019
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import java.util.*;
import Spec.*;
import FormulaSpec.*;
import Utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 16 09:47:37 ART 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\040\003\000\002\027" +
    "\016\000\002\027\014\000\002\027\014\000\002\027\012" +
    "\000\002\027\010\000\002\027\010\000\002\027\006\000" +
    "\002\026\003\000\002\026\005\000\002\025\005\000\002" +
    "\035\003\000\002\035\005\000\002\036\010\000\002\036" +
    "\010\000\002\024\003\000\002\024\004\000\002\020\007" +
    "\000\002\020\012\000\002\020\010\000\002\020\005\000" +
    "\002\022\003\000\002\022\005\000\002\023\005\000\002" +
    "\021\013\000\002\021\015\000\002\021\013\000\002\021" +
    "\011\000\002\021\017\000\002\021\017\000\002\021\021" +
    "\000\002\021\015\000\002\047\003\000\002\047\004\000" +
    "\002\046\020\000\002\046\014\000\002\013\005\000\002" +
    "\014\003\000\002\014\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\017\003\000\002\017\005" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\042\005\000\002" +
    "\043\005\000\002\044\003\000\002\044\005\000\002\045" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\005" +
    "\000\002\005\003\000\002\005\005\000\002\007\003\000" +
    "\002\007\005\000\002\006\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\011\003\000\002\011" +
    "\005\000\002\011\005\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\005\000\002\002\010\000\002\002" +
    "\005\000\002\002\010\000\002\002\006\000\002\002\010" +
    "\000\002\002\006\000\002\002\005\000\002\002\003\000" +
    "\002\041\002\000\002\041\007\000\002\041\007\000\002" +
    "\041\010\000\002\041\010\000\002\041\007\000\002\041" +
    "\007\000\002\041\007\000\002\041\010\000\002\041\010" +
    "\000\002\041\007\000\002\032\010\000\002\033\006\000" +
    "\002\031\003\000\002\031\005\000\002\030\005\000\002" +
    "\050\003\000\002\050\005\000\002\051\006\000\002\051" +
    "\007\000\002\052\003\000\002\052\005\000\002\053\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\u014b\001\002\000\004\063\007\001\002" +
    "\000\012\026\010\027\020\035\021\063\016\001\002\000" +
    "\004\063\016\001\002\000\004\017\u0137\001\002\000\006" +
    "\035\ufff1\037\ufff1\001\002\000\006\020\u0135\021\055\001" +
    "\002\000\004\017\ufff5\001\002\000\004\017\u012d\001\002" +
    "\000\014\015\uffd8\017\uffd8\020\uffd8\021\uffd8\055\uffd8\001" +
    "\002\000\004\017\ufff8\001\002\000\004\063\016\001\002" +
    "\000\004\063\236\001\002\000\006\035\021\037\024\001" +
    "\002\000\006\002\ufff9\071\062\001\002\000\004\011\026" +
    "\001\002\000\006\035\ufff0\037\ufff0\001\002\000\004\012" +
    "\027\001\002\000\004\015\030\001\002\000\004\063\016" +
    "\001\002\000\004\016\061\001\002\000\004\017\uff9d\001" +
    "\002\000\006\020\056\021\055\001\002\000\004\017\035" +
    "\001\002\000\006\063\016\074\041\001\002\000\004\017" +
    "\uff9a\001\002\000\004\017\uff9c\001\002\000\004\017\053" +
    "\001\002\000\004\063\042\001\002\000\004\011\043\001" +
    "\002\000\006\012\046\063\044\001\002\000\006\012\uff94" +
    "\021\uff94\001\002\000\006\012\051\021\050\001\002\000" +
    "\004\017\uff98\001\002\000\006\012\uff96\021\uff96\001\002" +
    "\000\004\063\044\001\002\000\004\017\uff97\001\002\000" +
    "\006\012\uff95\021\uff95\001\002\000\006\016\uff9e\074\041" +
    "\001\002\000\004\017\uff99\001\002\000\004\063\060\001" +
    "\002\000\004\063\057\001\002\000\004\017\uff9b\001\002" +
    "\000\014\015\uffd7\017\uffd7\020\uffd7\021\uffd7\055\uffd7\001" +
    "\002\000\006\002\uff9f\071\uff9f\001\002\000\004\020\063" +
    "\001\002\000\010\017\uffaa\045\066\046\065\001\002\000" +
    "\004\017\235\001\002\000\012\013\213\047\214\050\212" +
    "\057\211\001\002\000\012\013\071\047\072\050\070\057" +
    "\067\001\002\000\004\013\206\001\002\000\004\013\203" +
    "\001\002\000\060\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\106\022\uffaa\023\uffaa\030\105\031\113\040\116\044\074" +
    "\045\066\046\065\051\uffaa\052\uffaa\055\uffaa\060\120\061" +
    "\103\062\114\063\104\064\077\067\100\070\112\001\002" +
    "\000\004\013\073\001\002\000\056\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\106\014\uffaa\022\uffaa\023\uffaa\030\105" +
    "\031\113\040\116\044\074\045\066\046\065\055\uffaa\060" +
    "\120\061\103\062\114\063\104\064\077\067\100\070\112" +
    "\001\002\000\066\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\106\012\uffaa\014\uffaa\017\uffaa\022\uffaa\023\uffaa\030\105" +
    "\031\113\040\116\044\074\045\066\046\065\051\uffaa\052" +
    "\uffaa\055\uffaa\060\120\061\103\062\114\063\104\064\077" +
    "\067\100\070\112\001\002\000\004\014\172\001\002\000" +
    "\020\012\uffc9\014\uffc9\017\uffc9\022\uffc9\023\124\051\uffc9" +
    "\052\uffc9\001\002\000\032\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\012\uffb4\014\uffb4\017\uffb4\022\uffb4\023\uffb4\051\uffb4" +
    "\052\uffb4\055\uffb4\001\002\000\004\011\163\001\002\000" +
    "\026\005\157\006\160\012\uffc3\014\uffc3\017\uffc3\022\uffc3" +
    "\023\uffc3\051\uffc3\052\uffc3\055\uffc3\001\002\000\022\012" +
    "\uffc5\014\uffc5\017\uffc5\022\uffc5\023\uffc5\051\uffc5\052\uffc5" +
    "\055\155\001\002\000\032\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\012\uffb7\014\uffb7\017\uffb7\022\uffb7\023\uffb7\051\uffb7" +
    "\052\uffb7\055\uffb7\001\002\000\034\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\012\uffb5\014\uffb5\017\uffb5\022\uffb5\023\uffb5" +
    "\051\uffb5\052\uffb5\055\uffb5\073\147\001\002\000\066\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106\012\uffaa\014\uffaa" +
    "\017\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044" +
    "\074\045\066\046\065\051\uffaa\052\uffaa\055\uffaa\060\120" +
    "\061\103\062\114\063\104\064\077\067\100\070\112\001" +
    "\002\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106" +
    "\012\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044" +
    "\074\045\066\046\065\055\uffaa\060\120\061\103\062\114" +
    "\063\104\064\077\067\100\070\112\001\002\000\032\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\014\uffbf\017\uffbf" +
    "\022\uffbf\023\uffbf\051\uffbf\052\uffbf\055\uffbf\001\002\000" +
    "\032\005\uffc2\006\uffc2\007\141\010\140\012\uffc2\014\uffc2" +
    "\017\uffc2\022\uffc2\023\uffc2\051\uffc2\052\uffc2\055\uffc2\001" +
    "\002\000\032\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab" +
    "\014\uffab\017\uffab\022\uffab\023\uffab\051\uffab\052\uffab\055" +
    "\uffab\001\002\000\004\011\131\001\002\000\066\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\106\012\uffaa\014\uffaa\017" +
    "\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044\074" +
    "\045\066\046\065\051\uffaa\052\uffaa\055\uffaa\060\120\061" +
    "\103\062\114\063\104\064\077\067\100\070\112\001\002" +
    "\000\032\005\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\014" +
    "\uffb6\017\uffb6\022\uffb6\023\uffb6\051\uffb6\052\uffb6\055\uffb6" +
    "\001\002\000\032\005\uffbc\006\uffbc\007\uffbc\010\uffbc\012" +
    "\uffbc\014\uffbc\017\uffbc\022\uffbc\023\uffbc\051\uffbc\052\uffbc" +
    "\055\uffbc\001\002\000\004\073\126\001\002\000\016\012" +
    "\uffca\014\uffca\017\uffca\022\122\051\uffca\052\uffca\001\002" +
    "\000\032\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014" +
    "\uffb8\017\uffb8\022\uffb8\023\uffb8\051\uffb8\052\uffb8\055\uffb8" +
    "\001\002\000\020\012\uffc7\014\uffc7\017\uffc7\022\uffc7\023" +
    "\uffc7\051\uffc7\052\uffc7\001\002\000\066\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\106\012\uffaa\014\uffaa\017\uffaa\022" +
    "\uffaa\023\uffaa\030\105\031\113\040\116\044\074\045\066" +
    "\046\065\051\uffaa\052\uffaa\055\uffaa\060\120\061\103\062" +
    "\114\063\104\064\077\067\100\070\112\001\002\000\020" +
    "\012\uffc8\014\uffc8\017\uffc8\022\uffc8\023\124\051\uffc8\052" +
    "\uffc8\001\002\000\066\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\106\012\uffaa\014\uffaa\017\uffaa\022\uffaa\023\uffaa\030" +
    "\105\031\113\040\116\044\074\045\066\046\065\051\uffaa" +
    "\052\uffaa\055\uffaa\060\120\061\103\062\114\063\104\064" +
    "\077\067\100\070\112\001\002\000\020\012\uffc6\014\uffc6" +
    "\017\uffc6\022\uffc6\023\uffc6\051\uffc6\052\uffc6\001\002\000" +
    "\004\063\127\001\002\000\032\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\012\uffb1\014\uffb1\017\uffb1\022\uffb1\023\uffb1\051" +
    "\uffb1\052\uffb1\055\uffb1\001\002\000\032\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\012\uffba\014\uffba\017\uffba\022\uffba\023" +
    "\uffba\051\uffba\052\uffba\055\uffba\001\002\000\006\040\133" +
    "\063\132\001\002\000\004\012\137\001\002\000\004\073" +
    "\134\001\002\000\004\063\135\001\002\000\004\012\136" +
    "\001\002\000\032\005\uffae\006\uffae\007\uffae\010\uffae\012" +
    "\uffae\014\uffae\017\uffae\022\uffae\023\uffae\051\uffae\052\uffae" +
    "\055\uffae\001\002\000\032\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\012\uffad\014\uffad\017\uffad\022\uffad\023\uffad\051\uffad" +
    "\052\uffad\055\uffad\001\002\000\066\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\106\012\uffaa\014\uffaa\017\uffaa\022\uffaa" +
    "\023\uffaa\030\105\031\113\040\116\044\074\045\066\046" +
    "\065\051\uffaa\052\uffaa\055\uffaa\060\120\061\103\062\114" +
    "\063\104\064\077\067\100\070\112\001\002\000\066\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106\012\uffaa\014\uffaa" +
    "\017\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044" +
    "\074\045\066\046\065\051\uffaa\052\uffaa\055\uffaa\060\120" +
    "\061\103\062\114\063\104\064\077\067\100\070\112\001" +
    "\002\000\032\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe" +
    "\014\uffbe\017\uffbe\022\uffbe\023\uffbe\051\uffbe\052\uffbe\055" +
    "\uffbe\001\002\000\032\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\012\uffbd\014\uffbd\017\uffbd\022\uffbd\023\uffbd\051\uffbd\052" +
    "\uffbd\055\uffbd\001\002\000\004\012\145\001\002\000\032" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\012\uffac\014\uffac\017" +
    "\uffac\022\uffac\023\uffac\051\uffac\052\uffac\055\uffac\001\002" +
    "\000\032\005\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9\014" +
    "\uffb9\017\uffb9\022\uffb9\023\uffb9\051\uffb9\052\uffb9\055\uffb9" +
    "\001\002\000\006\063\150\070\151\001\002\000\032\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\017\uffb3" +
    "\022\uffb3\023\uffb3\051\uffb3\052\uffb3\055\uffb3\001\002\000" +
    "\004\011\152\001\002\000\004\063\153\001\002\000\004" +
    "\012\154\001\002\000\032\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\012\uffb2\014\uffb2\017\uffb2\022\uffb2\023\uffb2\051\uffb2" +
    "\052\uffb2\055\uffb2\001\002\000\064\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\106\012\uffaa\014\uffaa\017\uffaa\022\uffaa" +
    "\023\uffaa\030\105\031\113\040\116\044\074\045\066\046" +
    "\065\051\uffaa\052\uffaa\060\120\061\103\062\114\063\104" +
    "\064\077\067\100\070\112\001\002\000\020\012\uffc4\014" +
    "\uffc4\017\uffc4\022\uffc4\023\uffc4\051\uffc4\052\uffc4\001\002" +
    "\000\066\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106\012" +
    "\uffaa\014\uffaa\017\uffaa\022\uffaa\023\uffaa\030\105\031\113" +
    "\040\116\044\074\045\066\046\065\051\uffaa\052\uffaa\055" +
    "\uffaa\060\120\061\103\062\114\063\104\064\077\067\100" +
    "\070\112\001\002\000\066\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\011\106\012\uffaa\014\uffaa\017\uffaa\022\uffaa\023\uffaa" +
    "\030\105\031\113\040\116\044\074\045\066\046\065\051" +
    "\uffaa\052\uffaa\055\uffaa\060\120\061\103\062\114\063\104" +
    "\064\077\067\100\070\112\001\002\000\032\005\uffc0\006" +
    "\uffc0\007\141\010\140\012\uffc0\014\uffc0\017\uffc0\022\uffc0" +
    "\023\uffc0\051\uffc0\052\uffc0\055\uffc0\001\002\000\032\005" +
    "\uffc1\006\uffc1\007\141\010\140\012\uffc1\014\uffc1\017\uffc1" +
    "\022\uffc1\023\uffc1\051\uffc1\052\uffc1\055\uffc1\001\002\000" +
    "\006\040\165\063\164\001\002\000\004\012\171\001\002" +
    "\000\004\073\166\001\002\000\004\063\167\001\002\000" +
    "\004\012\170\001\002\000\032\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\012\uffb0\014\uffb0\017\uffb0\022\uffb0\023\uffb0\051" +
    "\uffb0\052\uffb0\055\uffb0\001\002\000\032\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\012\uffaf\014\uffaf\017\uffaf\022\uffaf\023" +
    "\uffaf\051\uffaf\052\uffaf\055\uffaf\001\002\000\032\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\012\uffa4\014\uffa4\017\uffa4\022" +
    "\uffa4\023\uffa4\051\uffa4\052\uffa4\055\uffa4\001\002\000\032" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb\014\uffbb\017" +
    "\uffbb\022\uffbb\023\uffbb\051\uffbb\052\uffbb\055\uffbb\001\002" +
    "\000\006\051\176\052\175\001\002\000\056\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\106\014\uffaa\022\uffaa\023\uffaa" +
    "\030\105\031\113\040\116\044\074\045\066\046\065\055" +
    "\uffaa\060\120\061\103\062\114\063\104\064\077\067\100" +
    "\070\112\001\002\000\056\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\011\106\014\uffaa\022\uffaa\023\uffaa\030\105\031\113" +
    "\040\116\044\074\045\066\046\065\055\uffaa\060\120\061" +
    "\103\062\114\063\104\064\077\067\100\070\112\001\002" +
    "\000\004\014\200\001\002\000\032\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\012\uffa2\014\uffa2\017\uffa2\022\uffa2\023\uffa2" +
    "\051\uffa2\052\uffa2\055\uffa2\001\002\000\004\014\202\001" +
    "\002\000\032\005\uffa1\006\uffa1\007\uffa1\010\uffa1\012\uffa1" +
    "\014\uffa1\017\uffa1\022\uffa1\023\uffa1\051\uffa1\052\uffa1\055" +
    "\uffa1\001\002\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\106\014\uffaa\022\uffaa\023\uffaa\030\105\031\113\040" +
    "\116\044\074\045\066\046\065\055\uffaa\060\120\061\103" +
    "\062\114\063\104\064\077\067\100\070\112\001\002\000" +
    "\004\014\205\001\002\000\032\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\012\uffa0\014\uffa0\017\uffa0\022\uffa0\023\uffa0\051" +
    "\uffa0\052\uffa0\055\uffa0\001\002\000\056\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\106\014\uffaa\022\uffaa\023\uffaa\030" +
    "\105\031\113\040\116\044\074\045\066\046\065\055\uffaa" +
    "\060\120\061\103\062\114\063\104\064\077\067\100\070" +
    "\112\001\002\000\004\014\210\001\002\000\032\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\012\uffa3\014\uffa3\017\uffa3\022" +
    "\uffa3\023\uffa3\051\uffa3\052\uffa3\055\uffa3\001\002\000\004" +
    "\013\232\001\002\000\004\013\227\001\002\000\060\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106\022\uffaa\023\uffaa" +
    "\030\105\031\113\040\116\044\074\045\066\046\065\051" +
    "\uffaa\052\uffaa\055\uffaa\060\120\061\103\062\114\063\104" +
    "\064\077\067\100\070\112\001\002\000\004\013\215\001" +
    "\002\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106" +
    "\014\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044" +
    "\074\045\066\046\065\055\uffaa\060\120\061\103\062\114" +
    "\063\104\064\077\067\100\070\112\001\002\000\004\014" +
    "\217\001\002\000\032\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\012\uffa9\014\uffa9\017\uffa9\022\uffa9\023\uffa9\051\uffa9\052" +
    "\uffa9\055\uffa9\001\002\000\006\051\222\052\221\001\002" +
    "\000\010\014\uffaa\045\066\046\065\001\002\000\056\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106\014\uffaa\022\uffaa" +
    "\023\uffaa\030\105\031\113\040\116\044\074\045\066\046" +
    "\065\055\uffaa\060\120\061\103\062\114\063\104\064\077" +
    "\067\100\070\112\001\002\000\004\014\224\001\002\000" +
    "\032\005\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\014\uffa7" +
    "\017\uffa7\022\uffa7\023\uffa7\051\uffa7\052\uffa7\055\uffa7\001" +
    "\002\000\004\014\226\001\002\000\032\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\012\uffa6\014\uffa6\017\uffa6\022\uffa6\023" +
    "\uffa6\051\uffa6\052\uffa6\055\uffa6\001\002\000\056\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\106\014\uffaa\022\uffaa\023" +
    "\uffaa\030\105\031\113\040\116\044\074\045\066\046\065" +
    "\055\uffaa\060\120\061\103\062\114\063\104\064\077\067" +
    "\100\070\112\001\002\000\004\014\231\001\002\000\032" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\014\uffa5\017" +
    "\uffa5\022\uffa5\023\uffa5\051\uffa5\052\uffa5\055\uffa5\001\002" +
    "\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106\014" +
    "\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044\074" +
    "\045\066\046\065\055\uffaa\060\120\061\103\062\114\063" +
    "\104\064\077\067\100\070\112\001\002\000\004\014\234" +
    "\001\002\000\032\005\uffa8\006\uffa8\007\uffa8\010\uffa8\012" +
    "\uffa8\014\uffa8\017\uffa8\022\uffa8\023\uffa8\051\uffa8\052\uffa8" +
    "\055\uffa8\001\002\000\004\002\ufffc\001\002\000\010\011" +
    "\242\015\240\036\241\001\002\000\006\035\uffec\037\uffec" +
    "\001\002\000\014\026\010\027\020\034\274\063\016\077" +
    "\270\001\002\000\004\063\016\001\002\000\004\063\243" +
    "\001\002\000\004\020\255\001\002\000\006\012\247\021" +
    "\246\001\002\000\006\012\uffeb\021\uffeb\001\002\000\004" +
    "\063\243\001\002\000\006\015\240\036\251\001\002\000" +
    "\006\035\uffed\037\uffed\001\002\000\004\063\016\001\002" +
    "\000\006\015\240\021\055\001\002\000\006\035\uffee\037" +
    "\uffee\001\002\000\006\012\uffea\021\uffea\001\002\000\014" +
    "\025\263\032\261\033\262\075\257\076\256\001\002\000" +
    "\010\012\uffd1\017\uffd1\021\uffd1\001\002\000\010\012\uffd0" +
    "\017\uffd0\021\uffd0\001\002\000\006\012\uffe9\021\uffe9\001" +
    "\002\000\010\012\uffd3\017\uffd3\021\uffd3\001\002\000\010" +
    "\012\uffd2\017\uffd2\021\uffd2\001\002\000\010\012\uffd4\017" +
    "\uffd4\021\uffd4\001\002\000\006\015\240\021\055\001\002" +
    "\000\006\035\uffef\037\uffef\001\002\000\004\017\u0101\001" +
    "\002\000\006\020\377\021\055\001\002\000\004\020\366" +
    "\001\002\000\004\017\361\001\002\000\004\017\uffdb\001" +
    "\002\000\004\017\277\001\002\000\004\020\275\001\002" +
    "\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106\017" +
    "\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044\074" +
    "\045\066\046\065\055\uffaa\060\120\061\103\062\114\063" +
    "\104\064\077\067\100\070\112\001\002\000\004\017\uffdc" +
    "\001\002\000\010\034\274\063\016\077\301\001\002\000" +
    "\004\017\uffda\001\002\000\004\020\350\001\002\000\004" +
    "\017\303\001\002\000\004\065\305\001\002\000\006\043" +
    "\uffe0\065\uffe0\001\002\000\004\063\320\001\002\000\006" +
    "\043\312\065\305\001\002\000\004\017\uffcd\001\002\000" +
    "\006\043\uffdf\065\uffdf\001\002\000\004\017\315\001\002" +
    "\000\004\020\313\001\002\000\056\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\106\017\uffaa\022\uffaa\023\uffaa\030\105" +
    "\031\113\040\116\044\074\045\066\046\065\055\uffaa\060" +
    "\120\061\103\062\114\063\104\064\077\067\100\070\112" +
    "\001\002\000\004\017\uffcb\001\002\000\006\016\317\043" +
    "\312\001\002\000\004\017\uffcc\001\002\000\006\035\uffe8" +
    "\037\uffe8\001\002\000\004\011\321\001\002\000\004\012" +
    "\322\001\002\000\004\015\323\001\002\000\006\041\325" +
    "\066\326\001\002\000\004\017\344\001\002\000\004\020" +
    "\342\001\002\000\004\020\327\001\002\000\004\063\016" +
    "\001\002\000\006\017\331\021\055\001\002\000\004\041" +
    "\325\001\002\000\004\017\333\001\002\000\004\042\335" +
    "\001\002\000\004\017\340\001\002\000\004\020\336\001" +
    "\002\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106" +
    "\017\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044" +
    "\074\045\066\046\065\055\uffaa\060\120\061\103\062\114" +
    "\063\104\064\077\067\100\070\112\001\002\000\004\017" +
    "\uffce\001\002\000\004\016\341\001\002\000\006\043\uffde" +
    "\065\uffde\001\002\000\056\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\011\106\017\uffaa\022\uffaa\023\uffaa\030\105\031\113" +
    "\040\116\044\074\045\066\046\065\055\uffaa\060\120\061" +
    "\103\062\114\063\104\064\077\067\100\070\112\001\002" +
    "\000\004\017\uffcf\001\002\000\004\042\335\001\002\000" +
    "\004\017\346\001\002\000\004\016\347\001\002\000\006" +
    "\043\uffdd\065\uffdd\001\002\000\004\063\016\001\002\000" +
    "\006\017\352\021\055\001\002\000\004\034\274\001\002" +
    "\000\004\017\354\001\002\000\004\065\305\001\002\000" +
    "\006\043\312\065\305\001\002\000\004\017\357\001\002" +
    "\000\006\016\360\043\312\001\002\000\006\035\uffe4\037" +
    "\uffe4\001\002\000\004\065\305\001\002\000\006\043\312" +
    "\065\305\001\002\000\004\017\364\001\002\000\006\016" +
    "\365\043\312\001\002\000\006\035\uffe5\037\uffe5\001\002" +
    "\000\004\063\016\001\002\000\006\017\370\021\055\001" +
    "\002\000\004\034\274\001\002\000\004\017\372\001\002" +
    "\000\004\065\305\001\002\000\006\043\312\065\305\001" +
    "\002\000\004\017\375\001\002\000\006\016\376\043\312" +
    "\001\002\000\006\035\uffe1\037\uffe1\001\002\000\014\025" +
    "\263\032\261\033\262\075\257\076\256\001\002\000\004" +
    "\017\uffd9\001\002\000\014\026\010\027\020\034\274\063" +
    "\016\077\u0103\001\002\000\004\017\ufff4\001\002\000\004" +
    "\020\u011c\001\002\000\004\017\u0117\001\002\000\004\017" +
    "\u0106\001\002\000\010\034\274\063\016\077\u0107\001\002" +
    "\000\004\020\u010e\001\002\000\004\017\u0109\001\002\000" +
    "\004\065\305\001\002\000\006\043\312\065\305\001\002" +
    "\000\004\017\u010c\001\002\000\006\016\u010d\043\312\001" +
    "\002\000\006\035\uffe7\037\uffe7\001\002\000\004\063\016" +
    "\001\002\000\006\017\u0110\021\055\001\002\000\004\034" +
    "\274\001\002\000\004\017\u0112\001\002\000\004\065\305" +
    "\001\002\000\006\043\312\065\305\001\002\000\004\017" +
    "\u0115\001\002\000\006\016\u0116\043\312\001\002\000\006" +
    "\035\uffe2\037\uffe2\001\002\000\004\065\305\001\002\000" +
    "\006\043\312\065\305\001\002\000\004\017\u011a\001\002" +
    "\000\006\016\u011b\043\312\001\002\000\006\035\uffe6\037" +
    "\uffe6\001\002\000\004\063\016\001\002\000\006\017\u011e" +
    "\021\055\001\002\000\004\034\274\001\002\000\004\017" +
    "\u0120\001\002\000\004\065\305\001\002\000\006\043\312" +
    "\065\305\001\002\000\004\017\u0123\001\002\000\006\016" +
    "\u0124\043\312\001\002\000\006\035\uffe3\037\uffe3\001\002" +
    "\000\006\021\055\055\u0126\001\002\000\004\015\u0127\001" +
    "\002\000\004\064\u0129\001\002\000\006\016\u012b\021\u012a" +
    "\001\002\000\006\016\uffd6\021\uffd6\001\002\000\004\064" +
    "\u012c\001\002\000\004\017\ufff2\001\002\000\006\016\uffd5" +
    "\021\uffd5\001\002\000\006\035\021\063\016\001\002\000" +
    "\004\017\ufff7\001\002\000\006\035\021\037\024\001\002" +
    "\000\006\002\ufffb\071\u0131\001\002\000\004\020\u0132\001" +
    "\002\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\106" +
    "\017\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116\044" +
    "\074\045\066\046\065\055\uffaa\060\120\061\103\062\114" +
    "\063\104\064\077\067\100\070\112\001\002\000\004\017" +
    "\u0134\001\002\000\004\002\ufffe\001\002\000\014\025\263" +
    "\032\261\033\262\075\257\076\256\001\002\000\004\017" +
    "\ufff6\001\002\000\012\026\010\027\020\035\021\063\016" +
    "\001\002\000\004\017\u013f\001\002\000\006\035\021\037" +
    "\024\001\002\000\006\002\ufffa\071\u013b\001\002\000\004" +
    "\020\u013c\001\002\000\010\017\uffaa\045\066\046\065\001" +
    "\002\000\004\017\u013e\001\002\000\004\002\ufffd\001\002" +
    "\000\006\035\021\063\016\001\002\000\006\035\021\037" +
    "\024\001\002\000\004\071\u0142\001\002\000\004\020\u0143" +
    "\001\002\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\106\017\uffaa\022\uffaa\023\uffaa\030\105\031\113\040\116" +
    "\044\074\045\066\046\065\055\uffaa\060\120\061\103\062" +
    "\114\063\104\064\077\067\100\070\112\001\002\000\004" +
    "\017\u0145\001\002\000\004\002\uffff\001\002\000\006\021" +
    "\055\055\u0147\001\002\000\004\015\u0148\001\002\000\004" +
    "\064\u0129\001\002\000\006\016\u014a\021\u012a\001\002\000" +
    "\004\017\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\006\027\003\040\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\012" +
    "\020\011\024\021\025\016\026\014\035\010\036\013\001" +
    "\001\000\004\016\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0124" +
    "\001\001\000\002\001\001\000\006\020\024\032\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\032\030" +
    "\031\031\033\033\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\032\030\036\050\037\051\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\044\053\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\114\003\173\004\116\005\075\006\101\007\120\010\100" +
    "\011\107\012\106\041\110\001\001\000\002\001\001\000" +
    "\026\002\114\003\074\004\116\005\075\006\101\007\120" +
    "\010\100\011\107\012\106\041\110\001\001\000\010\002" +
    "\114\012\172\041\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\114\012\145\041\110\001\001\000\026\002" +
    "\114\003\143\004\116\005\075\006\101\007\120\010\100" +
    "\011\107\012\106\041\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\114\012\127\041\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\114\005\122\006" +
    "\101\007\120\010\100\011\107\012\106\041\110\001\001" +
    "\000\002\001\001\000\020\002\114\006\101\007\124\010" +
    "\100\011\107\012\106\041\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\114\012\142\041\110\001\001\000\010" +
    "\002\114\012\141\041\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\114\006\155\010\100\011\107\012\106\041" +
    "\110\001\001\000\002\001\001\000\012\002\114\011\161" +
    "\012\106\041\110\001\001\000\012\002\114\011\160\012" +
    "\106\041\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\114\003\200\004\116\005\075\006\101" +
    "\007\120\010\100\011\107\012\106\041\110\001\001\000" +
    "\026\002\114\003\176\004\116\005\075\006\101\007\120" +
    "\010\100\011\107\012\106\041\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\114\003\203\004\116\005\075\006\101\007" +
    "\120\010\100\011\107\012\106\041\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\114\003\206\004" +
    "\116\005\075\006\101\007\120\010\100\011\107\012\106" +
    "\041\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\114\003\217" +
    "\004\116\005\075\006\101\007\120\010\100\011\107\012" +
    "\106\041\110\001\001\000\002\001\001\000\026\002\114" +
    "\003\215\004\116\005\075\006\101\007\120\010\100\011" +
    "\107\012\106\041\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\224\001\001\000" +
    "\026\002\114\003\222\004\116\005\075\006\101\007\120" +
    "\010\100\011\107\012\106\041\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\114\003\227\004\116\005\075\006\101\007" +
    "\120\010\100\011\107\012\106\041\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\114\003\232\004" +
    "\116\005\075\006\101\007\120\010\100\011\107\012\106" +
    "\041\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\236\001\001\000\002\001\001" +
    "\000\016\013\270\014\272\015\271\016\266\035\265\036" +
    "\013\001\001\000\004\016\263\001\001\000\006\022\243" +
    "\023\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\253\001\001\000\004\021\247" +
    "\001\001\000\002\001\001\000\004\016\251\001\001\000" +
    "\004\021\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\114\003\275\004\116\005\075" +
    "\006\101\007\120\010\100\011\107\012\106\041\110\001" +
    "\001\000\002\001\001\000\010\013\301\015\277\016\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\303\047\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\310\045\306\046\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\114\003\313\004\116\005" +
    "\075\006\101\007\120\010\100\011\107\012\106\041\110" +
    "\001\001\000\002\001\001\000\004\045\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\327\001\001\000\002\001\001\000\004\042\331\001" +
    "\001\000\002\001\001\000\004\043\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\114\003\336\004" +
    "\116\005\075\006\101\007\120\010\100\011\107\012\106" +
    "\041\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\114\003\342\004\116\005\075" +
    "\006\101\007\120\010\100\011\107\012\106\041\110\001" +
    "\001\000\002\001\001\000\004\043\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\350\001\001\000\002\001\001\000\004\013\352\001\001" +
    "\000\002\001\001\000\006\046\303\047\354\001\001\000" +
    "\010\044\355\045\306\046\307\001\001\000\002\001\001" +
    "\000\004\045\315\001\001\000\002\001\001\000\006\046" +
    "\303\047\361\001\001\000\010\044\362\045\306\046\307" +
    "\001\001\000\002\001\001\000\004\045\315\001\001\000" +
    "\002\001\001\000\004\016\366\001\001\000\002\001\001" +
    "\000\004\013\370\001\001\000\002\001\001\000\006\046" +
    "\303\047\372\001\001\000\010\044\373\045\306\046\307" +
    "\001\001\000\002\001\001\000\004\045\315\001\001\000" +
    "\002\001\001\000\004\037\377\001\001\000\002\001\001" +
    "\000\014\013\u0103\014\u0104\015\271\016\266\036\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\u0107\015\277\016\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\303" +
    "\047\u0109\001\001\000\010\044\u010a\045\306\046\307\001" +
    "\001\000\002\001\001\000\004\045\315\001\001\000\002" +
    "\001\001\000\004\016\u010e\001\001\000\002\001\001\000" +
    "\004\013\u0110\001\001\000\002\001\001\000\006\046\303" +
    "\047\u0112\001\001\000\010\044\u0113\045\306\046\307\001" +
    "\001\000\002\001\001\000\004\045\315\001\001\000\002" +
    "\001\001\000\006\046\303\047\u0117\001\001\000\010\044" +
    "\u0118\045\306\046\307\001\001\000\002\001\001\000\004" +
    "\045\315\001\001\000\002\001\001\000\004\016\u011c\001" +
    "\001\000\002\001\001\000\004\013\u011e\001\001\000\002" +
    "\001\001\000\006\046\303\047\u0120\001\001\000\010\044" +
    "\u0121\045\306\046\307\001\001\000\002\001\001\000\004" +
    "\045\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\012\020\011\024\u012e\025\u012d" +
    "\001\001\000\002\001\001\000\006\020\024\032\u012f\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\114" +
    "\003\u0132\004\116\005\075\006\101\007\120\010\100\011" +
    "\107\012\106\041\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u0135\001\001\000\002\001\001\000" +
    "\016\016\012\020\011\024\u0138\025\016\026\u0137\036\u0101" +
    "\001\001\000\002\001\001\000\006\020\024\032\u0139\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\012\020\011\024\u013f\025\u012d\001\001\000\006\020\024" +
    "\032\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\114\003\u0143\004\116\005\075\006\101\007\120" +
    "\010\100\011\107\012\106\041\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         //System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    	report_fatal_error("", null);
	}                          	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // invkParam ::= ID 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  LinkedList<String> l = new LinkedList<String>();
						l.add(id);
                        RESULT = l;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invkParam",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // invkParamList ::= invkParamList COMMA invkParam 
            {
              LinkedList<String> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listInvk = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> par = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
																		  listInvk.addAll(par);
                                                 						  RESULT = listInvk;
                                              						   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invkParamList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // invkParamList ::= invkParam 
            {
              LinkedList<String> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> par = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		            
                                    RESULT = par;
                          	   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invkParamList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // invk ::= RUN ID LPARENT invkParamList RPARENT 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> listP = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
													HashMap<String,LinkedList<String>> inks = new HashMap<String, LinkedList<String>>();
									  				inks.put(id, listP); 
									  				RESULT = inks;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invk",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // invk ::= RUN ID LPARENT RPARENT 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
									  HashMap<String,LinkedList<String>> inks = new HashMap<String, LinkedList<String>>();
                                      LinkedList<String> pars = new LinkedList<String>();
									  inks.put(id, pars); 
									  RESULT = inks;
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invk",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // processInvk ::= processInvk SEMICOLON invk 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,LinkedList<String>> listInvk = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,LinkedList<String>> i = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
														   Iterator<String> it = i.keySet().iterator();
														   while (it.hasNext()){
																String current = it.next();
																listInvk.put(current, i.get(current));
														   }		  
                                                           RESULT = listInvk;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processInvk",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // processInvk ::= invk 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,LinkedList<String>> i = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                       
                                 RESULT = i;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processInvk",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // proc ::= varDecls COLON ID 
            {
              HashMap<String,String> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typeProc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												HashMap<String,String> processes = new HashMap<String,String>();
												for (int i=0; i<listNames.size(); i++){
													if (processes.containsKey(listNames.get(i)))
														parser.report_error("Duplicated instance declaration, line: "+listNamesleft, listNames);
													else
														processes.put(listNames.get(i), typeProc);
												}
												RESULT = processes;
                                          	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // processDecl ::= processDecl SEMICOLON proc 
            {
              HashMap<String,String> RESULT =null;
		int listProcessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listProcessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,String> listProcess = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> lp = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
															Set<String> processes = lp.keySet();
															Iterator<String> iterator = processes.iterator();
															while (iterator.hasNext()){
																String currentProcess = iterator.next();
																if (listProcess.containsKey(currentProcess))
																	parser.report_error("Duplicated instance declaration, line: "+lpleft, lp);
																else
																	listProcess.put(currentProcess,lp.get(currentProcess));
															}
															RESULT = listProcess;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processDecl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // processDecl ::= proc 
            {
              HashMap<String,String> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> lp = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
						  RESULT = lp;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processDecl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // body ::= processDecl SEMICOLON processInvk SEMICOLON 
            {
              Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,String> declList = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invkListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int invkListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,LinkedList<String>> invkList = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
																			RESULT = new Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>(declList, invkList);
										 								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // program ::= MAIN LPARENT RPARENT LBRACE body RBRACE 
            {
              Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> dec = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
														RESULT = dec;
													  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // temporalFormula ::= FORALL FUTURE LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AF, q, null, qleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // temporalFormula ::= FORALL LBRACKET expr WEAKUNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AW, p, q, pleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // temporalFormula ::= FORALL LBRACKET expr UNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AU, p, q, pleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // temporalFormula ::= FORALL GLOBALLY LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AG, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // temporalFormula ::= FORALL NEXT LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AX, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // temporalFormula ::= EXIST FUTURE LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EF, q, null, qleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // temporalFormula ::= EXIST LBRACKET expr WEAKUNTIL temporalFormula RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EW, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // temporalFormula ::= EXIST LBRACKET expr UNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EU, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // temporalFormula ::= EXIST GLOBALLY LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EG, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // temporalFormula ::= EXIST NEXT LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EX, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // temporalFormula ::= 
            {
              ExprAux RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary ::= temporalFormula 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = f;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= LPARENT expr RPARENT 
            {
              ExprAux RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux ex = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary ::= OWN LPARENT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
													ExprAux v = new ExprAux(id, idleft);
													v.setOwner("par");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.OWN, v, null, idleft);  
												 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary ::= OWN LPARENT GLOBAL DOT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
													ExprAux v = new ExprAux("global."+id, idleft);
													v.setOwner("global");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.OWN, v, null, idleft);  
												 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary ::= AV LPARENT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
													ExprAux v = new ExprAux(id, idleft);
													v.setOwner("par");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.AV, v, null, idleft); 
												
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary ::= AV LPARENT GLOBAL DOT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
													ExprAux v = new ExprAux("global."+id, idleft);
													v.setOwner("global");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.AV, v, null, idleft); 
												
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primary ::= GLOBAL DOT ID 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExprAux v = new ExprAux("global."+id, idleft);
									v.setOwner("global"); // we set the owner could be this, global or any other process
									v.setUnqualifiedName(id);
									RESULT = v;
			     				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primary ::= ID DOT OWN LPARENT ID RPARENT 
            {
              ExprAux RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String owner = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
														ExprAux v = new ExprAux(owner+"."+id, idleft);
														v.setOwner(owner);
														v.setUnqualifiedName(id);
														RESULT = new ExprAux(Operator.OWN, v, null, idleft);  
														
												   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primary ::= ID DOT ID 
            {
              ExprAux RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String owner = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExprAux v = new ExprAux(owner+"."+id, idleft);
									v.setOwner(owner); // we set the owner could be this, global or any other process
									v.setUnqualifiedName(id);
									RESULT = v;
			     				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // primary ::= ENUMCONS 
            {
              ExprAux RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						 ExprAux v = new ExprAux(e, eleft);
						 
						 v.isEnumCons();  // we indicate that it is an enum constant
						 RESULT = v;
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // primary ::= ID 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  				ExprAux v = new ExprAux(id, idleft);
	  				v.setOwner("par"); // if no owner it is a parameter
					v.setUnqualifiedName(id); // the unqualified name is the same
	  				RESULT = v;
	  		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // primary ::= FALSE 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
					ExprAux c = new ExprAux(false, fleft);
					RESULT = c;
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // primary ::= TRUE 
            {
              ExprAux RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					ExprAux c = new ExprAux(true, tleft);
					RESULT = c;	
				  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primary ::= INTEGER 
            {
              ExprAux RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExprAux c = new ExprAux(v, vleft);
						  RESULT = c;
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= INC factor 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.INC, f, null, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= DEC factor 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.DEC, f, null, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= NEG factor 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.NOT, f, null, fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= primary 
            {
              ExprAux RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = op;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term SLASH factor 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   										ExprAux d = new ExprAux(Operator.DIV, op1,  op2, op1left);
										RESULT = d;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term ASTERISK factor 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										   ExprAux m = new ExprAux(Operator.MULT, op1, op2, op1left);
										   RESULT = m;
										 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= factor 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // addition ::= addition MINUS term 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											  ExprAux sum = new ExprAux(Operator.MINUS, op1, op2, op1left);
											  RESULT = sum;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // addition ::= addition PLUS term 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											 ExprAux sum = new ExprAux(Operator.SUM, op1, op2, op1left);
											 RESULT = sum;
										   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // addition ::= term 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relation ::= addition 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparison ::= relation EQ relation 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.EQ, op1, op2, op1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparison ::= relation 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conjunction ::= conjunction AND comparison 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new ExprAux(Operator.AND, op1, op2, op1left);
												   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conjunction ::= comparison 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // disjunction ::= disjunction OR conjunction 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExprAux(Operator.OR, op1, op2, op1left);		
												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // disjunction ::= conjunction 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= disjunction 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // invariant ::= INVARIANT COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
													RESULT = f;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariant",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // invariantList ::= invariantList SEMICOLON invariant 
            {
              LinkedList<ExprAux> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> list = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux i = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																list.add(i);
																RESULT = list;
															 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariantList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // invariantList ::= invariant 
            {
              LinkedList<ExprAux> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux i = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								LinkedList<ExprAux> list = new LinkedList<ExprAux>();
								list.add(i);
								RESULT = list;
							  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariantList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // postcond ::= POST COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postcond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // precond ::= PRE COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  f;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("precond",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= PRIMBOOL 
            {
              Type RESULT =null;
		 RESULT = Type.PRIMBOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= PRIMINT 
            {
              Type RESULT =null;
		 RESULT = Type.PRIMINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= LOCK 
            {
              Type RESULT =null;
		 RESULT = Type.LOCK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // enumDecls ::= enumDecls COMMA ENUMCONS 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if (list.contains(e))
										  		parser.report_error("Duplicated enum constant declaration, line: "+eleft, e);	
										  	else{
												list.add(e);
                                          		RESULT = list;
											}
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // enumDecls ::= ENUMCONS 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						    LinkedList<String> list = new LinkedList<String>();
							list.add(e);
							RESULT = list; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // varDecls ::= varDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if (list.contains(i))
										  		parser.report_error("Duplicated var declaration, line: "+ileft, i);	
										  	else{
												list.add(i);
                                          		RESULT = list;
											}
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecls",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // varDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                       list.add(i);
                       RESULT = list; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecls",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decl ::= varDecls COLON type 
            {
              HashMap<String,Type> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											HashMap<String, Type> res = new HashMap<String, Type>();
											for (int i=0; i<listNames.size(); i++){
												if (res.containsKey(listNames.get(i)))
													parser.report_error("Duplicated var declaration, line: "+listNamesleft, listNames);	
												else
													res.put(listNames.get(i), t);
											}
											RESULT = res;
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declList ::= declList SEMICOLON decl 
            {
              HashMap<String,Type> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Type> list = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
													Set<String> keys = listD.keySet();
													Iterator<String> it = keys.iterator();
													
													while (it.hasNext()){
														String var = it.next();
														if (list.containsKey(var))
															parser.report_error("Duplicated var declaration, line: "+listleft, list);	
														else
															list.put(var, listD.get(var));
													}	
													RESULT = list;
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declList ::= decl 
            {
              HashMap<String,Type> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                            RESULT = listD;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // initialCond ::= INIT COLON expr 
            {
              ExprAux RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux e = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e;  
								  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialCond",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // actiondef ::= ACTION ID LPARENT RPARENT LBRACE precond SEMICOLON postcond SEMICOLON RBRACE 
            {
              ActionAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprAux pre = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux post = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
																													 ActionAux a= new ActionAux(name);		
																													 a.setPre(pre);
																													 a.setPost(post);																													 
			 																										 RESULT = a;	
																												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actiondef",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // actiondef ::= ACTION ID LPARENT RPARENT LBRACE FRAME COLON varDecls SEMICOLON precond SEMICOLON postcond SEMICOLON RBRACE 
            {
              ActionAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int frameListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int frameListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<String> frameList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprAux pre = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux post = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
																													 ActionAux a= new ActionAux(name);		
																													 a.setPre(pre);
																													 a.setPost(post);
																													 a.addAllFrame(frameList);
			 																										 RESULT = a;	
																												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actiondef",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // actionlist ::= actionlist actiondef 
            {
              LinkedList<ActionAux> RESULT =null;
		int listAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ActionAux> listA = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionAux a = (ActionAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listA.add(a);
											  RESULT = listA;
										   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionlist",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // actionlist ::= actiondef 
            {
              LinkedList<ActionAux> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionAux a = (ActionAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ActionAux> res = new LinkedList<ActionAux>();
							 res.add(a);
							 RESULT = res;			 
						  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionlist",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bodyProcess ::= LBRACE OWNS COLON varDecls SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int ownsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ownsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> ownsList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  ProcessAux proc = new ProcessAux(initleft);
                                                                                                                                       proc.setInit(init);	
                                                                                                                                       //proc.setPre(pre);
																																	   //proc.setPost(post);
																																	   proc.addAllOwnedVars(ownsList); // the list of owned variables
																																	   proc.addAllActions(aList);	
																																	   proc.addAllInvs(inv);						
                                                                                                                                       RESULT = proc;   
                                                                                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bodyProcess ::= LBRACE enumList SEMICOLON declList SEMICOLON OWNS COLON varDecls SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ownsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ownsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> ownsList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 					   ProcessAux proc = new ProcessAux(listDleft);
																																					   proc.setInit(init);	
																																					   proc.addAllLocalVars(listD);
																																					   proc.addAllValuesToEnum(listE);
																																						//proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllOwnedVars(ownsList); // the list of owned vars
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);						
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bodyProcess ::= LBRACE enumList SEMICOLON OWNS COLON varDecls SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ownsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ownsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> ownsList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 					   ProcessAux proc = new ProcessAux(listEleft);
																																					   proc.setInit(init);	
																																					   //proc.addAllLocalVars(listD);
																																					   proc.addAllValuesToEnum(listE);
																																						//proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllOwnedVars(ownsList); // the list of owned vars
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);						
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bodyProcess ::= LBRACE declList SEMICOLON OWNS COLON varDecls SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ownsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ownsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> ownsList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 					   ProcessAux proc = new ProcessAux(listDleft);
																																					   proc.setInit(init);	
																																					   proc.addAllLocalVars(listD);
																																					   //proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllOwnedVars(ownsList); // the list of owned vars
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);						
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bodyProcess ::= LBRACE initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 		   ProcessAux proc = new ProcessAux(initleft);
                                                                                                                                       proc.setInit(init);	
                                                                                                                                       //proc.setPre(pre);
																																	   //proc.setPost(post);
																																	   proc.addAllActions(aList);	
																																	   proc.addAllInvs(inv);						
                                                                                                                                       RESULT = proc;   
                                                                                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bodyProcess ::= LBRACE enumList SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 					   ProcessAux proc = new ProcessAux(listEleft);
																																					   proc.setInit(init);																																						  
																																					   proc.addAllValuesToEnum(listE);
																																					   //proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);						
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bodyProcess ::= LBRACE enumList SEMICOLON declList SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 					   ProcessAux proc = new ProcessAux(listEleft);
																																					   
																																					   proc.setInit(init);	
																																					 
                                                                                                                                                       proc.addAllLocalVars(listD);
																																					   proc.addAllValuesToEnum(listE);
																																					   //proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);						
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bodyProcess ::= LBRACE declList SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 					   ProcessAux proc = new ProcessAux(listDleft);
																																					   proc.setInit(init);	
																																					   proc.addAllLocalVars(listD);
																																					   //proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);
																																				
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= ID COLON type 
            {
              LinkedList<Pair<String,Type>> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //HashMap<String, Type> dec = new HashMap<String, Type>();
								   //dec.put(name, t)
								   LinkedList<Pair<String, Type>> dec = new LinkedList<Pair<String, Type>>();
								   dec.add(new Pair(name, t));
								   RESULT = dec;
                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramList ::= paramList COMMA param 
            {
              LinkedList<Pair<String,Type>> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pair<String,Type>> list = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pair<String,Type>> p = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                list.addAll(p);
												RESULT = list;								
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramList ::= param 
            {
              LinkedList<Pair<String,Type>> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pair<String,Type>> p = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = p;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // process ::= PROCESS ID bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  proc.setName(name);
                                                  RESULT = proc;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // process ::= PROCESS ID LPARENT paramList RPARENT bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pair<String,Type>> listP = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   proc.setName(name);
                                                                                                     //proc.setParamList(listP);
																									 proc.addAllParameters(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // process ::= PROCESS ID LPARENT paramList RPARENT USES varDecls bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Pair<String,Type>> listP = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> listC = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 proc.setName(name);
                                                                                                     //proc.addAllLocalVars(listC);
																									 proc.addAllParameters(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // process ::= PROCESS ID USES varDecls bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> listC = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                    proc.setName(name);
																	//proc.addAllLocalVars(listC);
																	RESULT = proc;
																 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // processList ::= processList process 
            {
              LinkedList<ProcessAux> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> list = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux p = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.add(p);
                                               RESULT = list; 
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // processList ::= process 
            {
              LinkedList<ProcessAux> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux p = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                               LinkedList<ProcessAux> list = new LinkedList<ProcessAux>();
							   list.add(p);
							   RESULT = list;   
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // enumDecl ::= PRIMENUM varDecls EQ LBRACE enumDecls RBRACE 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
																	  HashMap<String, Pair<LinkedList<String>,Type>> result = new HashMap<String, Pair<LinkedList<String>,Type>>();
																	  for (String var:listNames){
																		Pair<LinkedList<String>,Type> description = new Pair<LinkedList<String>,Type>();
																		description.setFirst(ids);
																		description.setSecond(Type.ENUMPRIM);
																	  	result.put(var, description);
																	  }	
																	  RESULT = result;
																   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecl",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // enumDecl ::= ENUM varDecls EQ LBRACE enumDecls RBRACE 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
																	  HashMap<String, Pair<LinkedList<String>,Type>> result = new HashMap<String, Pair<LinkedList<String>,Type>>();
																	  for (String var:listNames){
																		Pair<LinkedList<String>,Type> description = new Pair<LinkedList<String>,Type>();
																		description.setFirst(ids);
																		description.setSecond(Type.ENUM);
																	  	result.put(var, description);
																	  }	
																	  RESULT = result;
																   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecl",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // enumList ::= enumList SEMICOLON enumDecl 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> list = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
 															for (String var:listE.keySet()){
																if (list.keySet().contains(var))
																	parser.report_error("Repeated var declaration, line:"+listleft, list);
																else
																	list.put(var, listE.get(var));
															}
															RESULT = list;
													     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // enumList ::= enumDecl 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = listE;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // globalDecl ::= varDecls COLON type 
            {
              HashMap<String,Type> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				HashMap<String, Type> vars = new HashMap<String,Type>();	
														for (int i = 0; i < listNames.size(); i++){
														  	if (vars.containsKey(listNames.get(i))){ // if repeated var then error
																parser.report_error("Repeated var declaration, line:"+listNamesleft, listNames);
															}
															else{
																vars.put(listNames.get(i), t);
															}
														}
														RESULT = vars;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // globalVarList ::= globalVarList SEMICOLON globalDecl 
            {
              HashMap<String,Type> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Type> list = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
																	//HashMap<String,String> d = new HashMap<String, String>(); 
																	
																	Set<String> keys = listD.keySet();
																	Iterator<String> it = keys.iterator();
																	while(it.hasNext()){
																		String elem = it.next();
																		if (list.containsKey(elem)){
																			parser.report_error("Repeated var declaration, line:"+listleft, list);
																		}
																		else{
																			list.put(elem, listD.get(elem));
																		}
																	}
																	RESULT = list;
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVarList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // globalVarList ::= globalDecl 
            {
              HashMap<String,Type> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = listD;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVarList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // specification ::= SPEC ID processList program 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	  SpecAux spec = new SpecAux(name);     
																											    	  spec.addAllProcesses(pList);																								  																 
																													  RESULT = spec;
                                                     			  											   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // specification ::= SPEC ID enumList SEMICOLON processList program 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> eList = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // TBD: enum
																					SpecAux spec= new SpecAux(name);
																					//spec.addAllSharedVars(varList);
																					spec.addAllValuesToEnum(eList);
																					spec.addAllProcesses(pList);
																					RESULT = spec;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // specification ::= SPEC ID globalVarList SEMICOLON processList program 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Type> varList = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SpecAux spec= new SpecAux(name);
																					spec.addAllSharedVars(varList);
																					spec.addAllProcesses(pList);
																					RESULT = spec;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // specification ::= SPEC ID processList program PROPERTY COLON temporalFormula SEMICOLON 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux gf = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  	  SpecAux spec = new SpecAux(name);
																											    	  spec.addAllProcesses(pList);
																													  spec.addInvariant(gf);																	 
																													  RESULT = spec;
                                                     			  											   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // specification ::= SPEC ID enumList SEMICOLON processList program PROPERTY COLON temporalFormula SEMICOLON 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> eList = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux gf = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
																													  // TBD: enum
																													  SpecAux spec = new SpecAux(name);
																											    	  spec.addAllProcesses(pList);
																													  spec.addAllValuesToEnum(eList);
																													  spec.addInvariant(gf);																	 
																													  RESULT = spec;
                                                     			  											   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // specification ::= SPEC ID globalVarList SEMICOLON processList program PROPERTY COLON expr SEMICOLON 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> varList = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux gf = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SpecAux spec= new SpecAux(name);
																					spec.addAllSharedVars(varList);
																					spec.addAllProcesses(pList);
																					spec.addInvariant(gf);
																					
																					// we add the instances
																					Set<String> keys = main.getFirst().keySet();
																					Iterator<String> it = keys.iterator();
																					while (it.hasNext()){
																						String current = it.next();
																						spec.addInstance(current, main.getFirst().get(current));
																					}
																					// we add its parameters
																					Set<String> keysP = main.getSecond().keySet();
																					Iterator<String> itP = keysP.iterator();
																					while (itP.hasNext()){
																						String currentP = itP.next();
																						spec.addInstanceActualPars(currentP, main.getSecond().get(currentP));
																					}
																					RESULT = spec;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= SPEC ID enumList SEMICOLON globalVarList SEMICOLON processList program PROPERTY COLON expr SEMICOLON 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> eList = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> varList = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux gf = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
																					// TBD: ADD ENUM ACTIONS
																					SpecAux spec= new SpecAux(name);
																					spec.addAllSharedVars(varList);
																					spec.addAllProcesses(pList);																			
																					spec.addInvariant(gf);
																					spec.addAllValuesToEnum(eList);
																					// we add the instances
																					Set<String> keys = main.getFirst().keySet();
																					Iterator<String> it = keys.iterator();
																					while (it.hasNext()){
																						String current = it.next();
																						spec.addInstance(current, main.getFirst().get(current));
																					}
																					// we add its parameters
																					Set<String> keysP = main.getSecond().keySet();
																					Iterator<String> itP = keysP.iterator();
																					while (itP.hasNext()){
																						String currentP = itP.next();
																						spec.addInstanceActualPars(currentP, main.getSecond().get(currentP));
																					}
																					RESULT = spec;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainSpecification ::= specification 
            {
              SpecAux RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SpecAux prog = (SpecAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = prog; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainSpecification",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SpecAux start_val = (SpecAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

